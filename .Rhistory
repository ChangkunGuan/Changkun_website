print(density_plot_5)
library(ggtern)
# Create a combined ggtern plot
ternary_plot <- ggtern(data, aes(x = Depression, y = Insomnia, z = Anxiety, color = Fav.genre)) +
geom_density_tern() +
theme_minimal() +
labs(x = "Depression Score", y = "Insomnia Score", z = "Anxiety Score") +
theme(legend.title = element_blank())
print(ternary_plot)
data <- data[order(data$Primary.streaming.service),]
for (number in 1:16) {
data <- data[-number, ]
}
library(ggtern)
# Create a combined ggtern plot
ternary_plot <- ggtern(data, aes(x = Depression, y = Insomnia, z = Anxiety, color = Fav.genre)) +
geom_density_tern() +
theme_minimal() +
labs(x = "Depression Score", y = "Insomnia Score", z = "Anxiety Score") +
theme(legend.title = element_blank())
print(ternary_plot)
library(ggtern)
# Create a combined ggtern plot
ternary_plot <- ggtern(data, aes(x = Depression, y = Insomnia, z = Anxiety, color = Fav.genre)) +
geom_density_tern() +
theme_minimal() +
labs(x = "Depression Score", y = "Insomnia Score", z = "Anxiety Score") +
theme(legend.title = element_blank())
print(ternary_plot)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
data = read.csv("mxmh_survey_results.csv", header = T)
#str(data)
library(ggplot2)
library(dplyr)
library(forcats)
library(tidyverse)
library(ggcorrplot)
library(GGally)
library(vcd)
library(plotly)
library(pheatmap)
library(highcharter)
options(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 2)))
data <- data[order(data$Primary.streaming.service),]
for (number in 1:16) {
data <- data[-number, ]
}
# Create a violin plot
violin_plot <- ggplot(data, aes(x = Primary.streaming.service, y = Hours.per.day, fill = Primary.streaming.service)) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, fill = "white", alpha = 0.7) +
labs(x = "Primary Streaming Service", y = "Hours per Day") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
print(violin_plot)
# Load necessary packages
library(tidyverse)
library(pheatmap)
# Create a sample data frame
data1 <- data.frame(age_group = c("11-20", "21-30", "31-40", "41-50", "51-60","60+"),
Primary.streaming.service = c("Sportify", "Apple Music", "I do not use a streaming service", "Other streaming service", "Pandora", "YouTube Music"),
stringsAsFactors = FALSE)
# Create the age_streaming_table
age_streaming_table <- table(data1$age_group, data1$Primary.streaming.service)
# Create a heatmap
heatmap_plot <- pheatmap(age_streaming_table,
scale = "none",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Heatmap: Age Groups and Primary Streaming Services",
xlab = "Primary Streaming Service",
ylab = "Age Group")
print(heatmap_plot)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(x = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "stack") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
density_plot_3 <- ggplot(data, aes(x = Depression, fill = Fav.genre)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(x = "Depression Score", y = "Density") +
theme(legend.title = element_blank())
print(density_plot_3)
density_plot_4 <- ggplot(data, aes(x = Insomnia, fill = Fav.genre)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(x = "Insomnia Score", y = "Insomnia") +
theme(legend.title = element_blank())
print(density_plot_4)
density_plot_5 <- ggplot(data, aes(x = Anxiety, fill = Fav.genre)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(x = "Anxiety Score", y = "Anxiety") +
theme(legend.title = element_blank())
print(density_plot_5)
library(ggtern)
# Create a combined ggtern plot
ternary_plot <- ggtern(data, aes(x = Depression, y = Insomnia, z = Anxiety, color = Fav.genre)) +
geom_density_tern() +
theme_minimal() +
labs(x = "Depression Score", y = "Insomnia Score", z = "Anxiety Score") +
theme(legend.title = element_blank())
print(ternary_plot)
knitr::opts_chunk$set(echo = FALSE)
data = read.csv("mxmh_survey_results.csv", header = T)
#str(data)
library(ggplot2)
library(dplyr)
library(forcats)
library(tidyverse)
library(ggcorrplot)
library(GGally)
library(vcd)
library(plotly)
library(pheatmap)
library(highcharter)
options(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 2)))
data <- data[order(data$Primary.streaming.service),]
for (number in 1:16) {
data <- data[-number, ]
}
# Create a violin plot
violin_plot <- ggplot(data, aes(x = Primary.streaming.service, y = Hours.per.day, fill = Primary.streaming.service)) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, fill = "white", alpha = 0.7) +
labs(x = "Primary Streaming Service", y = "Hours per Day") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
print(violin_plot)
# Load necessary packages
library(tidyverse)
library(pheatmap)
# Create a sample data frame
data1 <- data.frame(age_group = c("11-20", "21-30", "31-40", "41-50", "51-60","60+"),
Primary.streaming.service = c("Sportify", "Apple Music", "I do not use a streaming service", "Other streaming service", "Pandora", "YouTube Music"),
stringsAsFactors = FALSE)
# Create the age_streaming_table
age_streaming_table <- table(data1$age_group, data1$Primary.streaming.service)
# Create a heatmap
heatmap_plot <- pheatmap(age_streaming_table,
scale = "none",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Heatmap: Age Groups and Primary Streaming Services",
xlab = "Primary Streaming Service",
ylab = "Age Group")
print(heatmap_plot)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(x = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "stack") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
density_plot_3 <- ggplot(data, aes(x = Depression, fill = Fav.genre)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(x = "Depression Score", y = "Density") +
theme(legend.title = element_blank())
print(density_plot_3)
density_plot_4 <- ggplot(data, aes(x = Insomnia, fill = Fav.genre)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(x = "Insomnia Score", y = "Insomnia") +
theme(legend.title = element_blank())
print(density_plot_4)
density_plot_5 <- ggplot(data, aes(x = Anxiety, fill = Fav.genre)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(x = "Anxiety Score", y = "Anxiety") +
theme(legend.title = element_blank())
print(density_plot_5)
library(ggtern)
# Create a combined ggtern plot
ternary_plot <- ggtern(data, aes(x = Depression, y = Insomnia, z = Anxiety, color = Fav.genre)) +
geom_density_tern() +
theme_minimal() +
labs(x = "Depression Score", y = "Insomnia Score", z = "Anxiety Score") +
theme(legend.title = element_blank())
print(ternary_plot)
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("mxmh_survey_results.csv", header = T)
#str(data)
library(ggplot2)
library(dplyr)
library(forcats)
library(tidyverse)
library(ggcorrplot)
library(GGally)
library(vcd)
library(plotly)
library(pheatmap)
library(highcharter)
options(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 2)))
#Clean the Data
data <- data[order(data$Primary.streaming.service),]
for (number in 1:16) {
data <- data[-number, ]
}
View(data)
# Load necessary packages
library(tidyverse)
library(pheatmap)
# Create a sample data frame
data1 <- data.frame(age_group = c("11-20", "21-30", "31-40", "41-50", "51-60","60+"),
Primary.streaming.service = c("Sportify", "Apple Music", "I do not use a streaming service", "Other streaming service", "Pandora", "YouTube Music"),
stringsAsFactors = FALSE)
# Create the age_streaming_table
age_streaming_table <- table(data1$age_group, data1$Primary.streaming.service)
# Create a heatmap
heatmap_plot <- pheatmap(age_streaming_table,
scale = "none",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Heatmap: Age Groups and Primary Streaming Services",
xlab = "Primary Streaming Service",
ylab = "Age Group")
print(heatmap_plot)
View(data1)
# Create a violin plot
violin_plot <- ggplot(data, aes(x = Primary.streaming.service, y = Hours.per.day, fill = Primary.streaming.service)) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, fill = "white", alpha = 0.7) +
labs(x = "Primary Streaming Service", y = "Hours per Day") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
print(violin_plot)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(x = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "stack") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(x = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "stack") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(x = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "dodge") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(y = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "dodge") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(y = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "stacked") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(y = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "stack") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
# Create a stacked bar chart
stacked_bar_chart <- ggplot(data, aes(y = Fav.genre, fill = Primary.streaming.service)) +
geom_bar(position = "dodge") +
labs(
title = "Streaming Services by Favorite Genre",
x = "Favorite Genre",
y = "Count",
fill = "Primary Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(size = 10)
)
interactive_stacked_bar_chart <- ggplotly(stacked_bar_chart)
print(interactive_stacked_bar_chart)
library(shiny); runApp('~/Desktop/Final.R')
runApp('~/Desktop/Final.R')
runApp('~/Desktop/Final.R')
runApp('~/Desktop/Final.R')
library(shiny); runApp('~/Desktop/Bucknell/Final (1).R')
The most limitation of this investigate is lacking a model to describe the correlation between mental health and music. Although visualization methods are the direct way to reveal the relationship between mental health and music, but there are too much variables existed, which makes the conditional plots are hard to be constructed. The marginal relationship visualized in this report may be misleaded or biased.
![Yellow Informational Data Insurance Infographic.pdf](Yellow Informational Data Insurance Infographic.pdf){width="100%", scroll = F}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
ggcorrplot(data%>%select(Anxiety,Depression,Insomnia,OCD)%>%cor())%>%ggplotly()
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
rm(list = ls())
data = read.csv("mxmh_survey_results.csv", header = T)
#str(data)
library(ggplot2)
library(dplyr)
library(forcats)
library(tidyverse)
library(ggcorrplot)
library(GGally)
library(vcd)
library(plotly)
library(pheatmap)
library(highcharter)
library(factoextra)
library(ggpubr)
options(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 2)))
ggcorrplot(data%>%select(Anxiety,Depression,Insomnia,OCD)%>%cor())%>%ggplotly()
data%>%select(Anxiety,Depression,Insomnia,OCD,While.working)%>%filter(While.working!='')%>%
pivot_longer(!While.working)%>%
ggplot(aes(value))+
geom_density(aes(fill=While.working),alpha=0.6)+
facet_wrap(vars(name))+
theme_bw()+
scale_fill_manual(values=c('red4','skyblue3'))+
guides(fill='none')
data %>%
select(Anxiety, Depression, Insomnia, OCD, While.working) %>%
filter(While.working != '') %>%
pivot_longer(cols = -While.working, names_to = "Mental.Health.Condition", values_to = "value") %>%
ggplot(aes(x = value, fill = While.working)) +
geom_density(alpha = 0.6) +
facet_wrap(vars(Mental.Health.Condition)) +
theme_bw() +
scale_fill_manual(values = c('red4', 'skyblue3'), name = "Working Status",
labels = c("Not Working", "Working")) +
theme(legend.position = "bottom")
data%>%select(Anxiety,Depression,Insomnia,OCD,While.working)%>%filter(While.working!='')%>%
pivot_longer(!While.working)%>%
ggplot(aes(value))+
geom_density(aes(fill=While.working),alpha=0.6)+
facet_wrap(vars(name))+
theme_bw()+
scale_fill_manual(values=c('red4','skyblue3'))+
guides(fill='none')
data %>%
select(Anxiety, Depression, Insomnia, OCD, While.working) %>%
filter(While.working != '') %>%
pivot_longer(cols = -While.working, names_to = "Mental.Health.Condition", values_to = "value") %>%
ggplot(aes(x = value, fill = While.working)) +
geom_density(alpha = 0.6) +
facet_wrap(vars(Mental.Health.Condition)) +
theme_bw() +
scale_fill_manual(values = c('red4', 'skyblue3'), name = "Working Status",
labels = c("Not Working", "Working")) +
theme(legend.position = "bottom")
#Selects columns that contain the word 'Frequency', then applies a transformation to each value in these columns by subtracting the value from 5 after converting it to a numeric value. Finally, it removes the 'Frequency..' part from the column names.
dat1<-data%>%select_at(vars(contains('Frequency')))%>%
mutate_all(function(x) 5-as.numeric(as.factor(x)))%>%
rename_all(function(x) gsub('Frequency..','',x))
p1<-dat1%>%cor()%>%ggcorrplot()+theme(axis.text.x = element_blank())
#p2<-fviz_nbclust(scale(dat1),FUN = kmeans,method = "silhouette")
#k-means clustering algorithm is applied
clust<-kmeans(scale(dat1),2)
p3<-fviz_pca_biplot(princomp(dat1),geom = c("point"),
col.ind=as.factor(clust$cluster),
col.var = 'black')
ggarrange(p1,p2,nrow=2)
#Selects columns that contain the word 'Frequency', then applies a transformation to each value in these columns by subtracting the value from 5 after converting it to a numeric value. Finally, it removes the 'Frequency..' part from the column names.
dat1<-data%>%select_at(vars(contains('Frequency')))%>%
mutate_all(function(x) 5-as.numeric(as.factor(x)))%>%
rename_all(function(x) gsub('Frequency..','',x))
p1<-dat1%>%cor()%>%ggcorrplot()+theme(axis.text.x = element_blank())
p2<-fviz_nbclust(scale(dat1),FUN = kmeans,method = "silhouette")
#k-means clustering algorithm is applied
clust<-kmeans(scale(dat1),2)
p3<-fviz_pca_biplot(princomp(dat1),geom = c("point"),
col.ind=as.factor(clust$cluster),
col.var = 'black')
ggarrange(p1,p2,nrow=2)
p3
ggarrange(p1nrow=2)
#Selects columns that contain the word 'Frequency', then applies a transformation to each value in these columns by subtracting the value from 5 after converting it to a numeric value. Finally, it removes the 'Frequency..' part from the column names.
dat1<-data%>%select_at(vars(contains('Frequency')))%>%
mutate_all(function(x) 5-as.numeric(as.factor(x)))%>%
rename_all(function(x) gsub('Frequency..','',x))
p1<-dat1%>%cor()%>%ggcorrplot()+theme(axis.text.x = element_blank())
p2<-fviz_nbclust(scale(dat1),FUN = kmeans,method = "silhouette")
#k-means clustering algorithm is applied
clust<-kmeans(scale(dat1),2)
p3<-fviz_pca_biplot(princomp(dat1),geom = c("point"),
col.ind=as.factor(clust$cluster),
col.var = 'black')
ggarrange(p1)
p3
#Selects columns that contain the word 'Frequency', then applies a transformation to each value in these columns by subtracting the value from 5 after converting it to a numeric value. Finally, it removes the 'Frequency..' part from the column names.
dat1<-data%>%select_at(vars(contains('Frequency')))%>%
mutate_all(function(x) 5-as.numeric(as.factor(x)))%>%
rename_all(function(x) gsub('Frequency..','',x))
p1<-dat1%>%cor()%>%ggcorrplot()+theme(axis.text.x = element_blank())
p2<-fviz_nbclust(scale(dat1),FUN = kmeans,method = "silhouette")
#k-means clustering algorithm is applied
clust<-kmeans(scale(dat1),2)
p3<-fviz_pca_biplot(princomp(dat1),geom = c("point"),
col.ind=as.factor(clust$cluster),
col.var = 'black')
#ggarrange(p1)
p3
